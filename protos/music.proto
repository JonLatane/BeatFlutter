syntax = "proto3";

// `java_package` must match the package name you declare for `androidPackage` in your pubspec.yaml
option java_package = "org.beatscratch.messages";

// NoteName corresponds to "white keys" (notes A-G)
enum NoteName {
  C = 0;
  D = 1;
  E = 2;
  F = 3;
  G = 4;
  A = 5;
  B = 6;
};

enum NoteSign {
  natural = 0;
  none = 1;
  flat = 2;
  double_flat = 3;
  sharp = 4;
  double_sharp = 5;
}

message Note {
  NoteName note_name = 1;
  NoteSign note_sign = 2;
}

message Chord {
  Note root_note = 1;
}

// A Harmony is a rhythmic mapping of chords.
message Harmony {
  string id = 1;
  uint32 subdivisions_per_beat = 2;
  // Length in subdivisions (so, length in beats is length / subdivisions_per_beat)
  uint32 length = 3;
  // Cannot be empty for a valid harmony. Generally, should contain an attack at 0.
  map<sint32, Chord> data = 4;
}

enum MelodyType {
  // Uses MelodyAttacks
  melody_harmonic = 0;
  melody_drum = 1;
  midi_harmonic = 2;
  midi_drum = 3;
}

message MelodyAttack {

}

message MidiChange {

}

message Melody {
  string id = 1;
  string name = 2;
  uint32 subdivisions_per_beat = 3;
  // Length in subdivisions (so, length in beats is length / subdivisions_per_beat)
  uint32 length = 4;

  // Indicates what type of data (attacks only or full MIDI) this melody uses.
  MelodyType type = 5;
  // Used for MelodyType.melody_harmonic and MelodyType.melody_drum
  map<sint32, MelodyAttack> attack_data = 6;
  // Used for MelodyType.midi_harmonic and MelodyType.midi_drum
  map<sint32, MelodyAttack> midi_data = 7;
}

enum InstrumentType {
  harmonic = 0;
  drum = 1;
}

message Instrument {
  string name = 1;
  InstrumentType type = 2;
  float volume = 3;
  // Used by InstrumentType.midi_harmonic and InstrumentType.midi_drum
  uint32 midi_channel = 4;
  // Used by InstrumentType.midi_harmonic and InstrumentType.midi_drum
  uint32 midi_instrument = 5;
  // Used by InstrumentType.midi_harmonic and InstrumentType.midi_drum
  uint32 midi_gm2_msb = 6;
  // Used by InstrumentType.midi_harmonic and InstrumentType.midi_drum
  uint32 midi_gm2_lsb = 7;
}

message Part {
  string id = 1;
  Instrument instrument = 3;
  repeated Melody melodies = 4;
}

message MelodyReference {
  enum PlaybackType {
    disabled = 0;
    playback_indefinitely = 1;
  }
  string melody_id = 1;
  PlaybackType playback_type = 2;
  // Volume, between 0 and 1.
  float volume = 3;
}

message Section {
  string id = 1;
  string name = 2;
  Harmony harmony = 3;
  // Maps Part.ids to melodies
  repeated MelodyReference melodies = 4;
}

message Score {
  string id = 1;
  string name = 2;
  repeated Part parts = 3;
  repeated Section sections = 4;
}